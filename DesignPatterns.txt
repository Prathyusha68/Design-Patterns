SOLID Principles of OOPs
========================
1) S - Single Responsibility Principle.
       A Class should have only one reason to change

2) O - Open/Closed Principle.
       Open for extension but closed for modification.

3) L - Liskov Substitution Principle.
       If class B is subtype of class A, then we should be able to replace object A with B without
       breaking the behaviour of the program.

4) I - Interface Segmented Principle.
       Interfaces should be such, that client should not implement unnecessary functions they do not need.

5) D - Dependency Inversion Principle.
       Classes should depend on interfaces rather than on concrete classes.

Advantages :
----------
Helps us to write better code:
- Avoid duplicate code
- Easy to maintain
- Easy to understand 
- Flexible software
- Reduce complexity

Design Patterns:
===============
They are 3 types of design patters:

1) Creational Design Pattern
2) Structural Design Pattern
3) Behavioral Design Pattern


1) Creational Design Pattern

    o Singleton design pattern :
      ------------------------
      Singleton is a creational design pattern that lets you ensure that a class has only one instance,
      while providing a global access point to this instance.
      
      Applicability :
      -------------
      -> Use the Singleton pattern when a class in your program should have just a single instance available
         to all clients; for example, a single database object shared by different parts of the program.

      How to implement :
      ----------------
        1. Add a private static field to the class for storing the singleton instance.
        2. Declare a public static creation method for getting the singleton instance.
        3. Implement “lazy initialization” inside the static method. It should create a new object on its first call
           and put it into the static field. The method should always return that instance on all subsequent calls.
        4. Make the constructor of the class private. The static method of the class will still be able to call the
           constructor, but not the other objects.
        5. Go over the client code and replace all direct calls to the singleton’s constructor with calls to its static
           creation method.

      Pros :
      ----
      -> You can be sure that a class has only a single instance.
      -> You gain a global access point to that instance.
      -> The singleton object is initialized only when it’s requested for the 􀃩rst time.

      Cons :
      ----
      -> Violates the Single Responsibility Principle. The pattern solves two problems at the time.
      -> The Singleton pattern can mask bad design, for instance, when the components of the
         program know too much about each other.
      -> The pattern requires special treatment in a multithreaded environment so that multiple
         threads won’t create a singleton object several times.
      -> It may be difficult to unit test the client code of the Singleton because many test frameworks
         rely on inheritance when producing mock objects. Since the constructor of the singleton
         class is private and overriding static methods is impossible in most languages, you will need
         to think of a creative way to mock the singleton. Or just don’t write the tests. Or don’t
         use the Singleton pattern.
    o Factory design pattern :
      ----------------------
      Factory Method is a creational design pattern that provides an interface for creating objects in
      a superclass, but allows subclasses to alter the type of objects that will be created.